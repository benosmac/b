---
import Layout from '@layouts/LayoutProject.astro'
import Gallery from '@components/Gallery.astro'
import Button from '@components/Button.astro'
import { Icon } from 'astro-icon'
import { getCollection } from 'astro:content'
import type { CollectionEntry } from 'astro:content'

// Generate paths for entire collection
export async function getStaticPaths() {
    const projects = await getCollection('projects')
    return projects.map((project) => ({
        params: { slug: project.slug },
        props: { project },
    }))
}

interface Props {
    project: CollectionEntry<'projects'>
}

// Get the project
const { project } = Astro.props
// Get the content
const { Content } = await project.render()

// Get path to images folder for this project
const pathToImages = `/images/${project.slug}`

// Get all project images
// This is required because Vite's import.meta.glob does not accept variables in the path
// Returns: Array of image paths
const allImages: Array<string> = Object.keys(
    import.meta.glob('/src/images/**/*.jpg', {
        as: 'url',
    })
)
// Filter only images for current project
// Exclude feature image
const filteredImages: Array<string> = allImages.filter(
    (image) => image.includes(pathToImages) && !image.includes('feature')
)
//Get custom accent colour
const customColour = project.data.customColour
//Get project categories
const categories = project.data.categories
---

<Layout title={project.data.title} customColour={customColour}>
    <section class="description">
        <div class="content">
            <h1>{project.data.title}</h1>
            <Content />
            <footer class="details" role="contentinfo">
                <span>
                    <h5>Role:</h5>
                    <ul>
                        {categories.map((category) => <li>{category}</li>)}
                    </ul>
                </span>
                <span>
                    <h5>Completed:</h5>
                    <time datetime={project.data.date}>{project.data.date}</time
                    >
                </span>
                {
                    project.data.liveUrl && (
                        <span>
                            <h5>Link</h5>
                            <a href={project.data.liveUrl} target="_blank">
                                {project.data.liveUrl}{' '}
                                <Icon name="mdi:open-in-new" />
                            </a>
                        </span>
                    )
                }
            </footer>
        </div>
    </section>
    <div class="gallery-wrapper">
        <Gallery images={filteredImages} maxCols={project.data.maxCols} />
    </div>
    <div class="back-button-wrapper">
        <!-- <a href="/projects" class="button back-button">Back to projects</a> -->
        <Button url="/projects" text="Back to projects" hasIcon={true}
            ><Icon name="mdi:arrow-left" slot="icon" />
        </Button>
    </div>
</Layout>

<style>
    .description {
        background: var(--surface-1);
        grid-column: 1 / span all;
        padding: var(--gapSize);
        @media (min-width: 1000px) {
            grid-column: 6 / span 2;
            order: 2;
            padding: calc(var(--gapSize) * 2) var(--gapSize);
        }

        @media (min-width: 1300px) {
            padding: calc(var(--gapSize) * 2);
        }
    }
    :global(#main) {
        grid-template-rows: 1fr auto;
    }
    .content {
        max-width: 36em;
        margin: 0 auto;

        @media (min-width: 1000px) {
            position: sticky;
            top: calc(var(--gapSize) * 2);
        }
    }
    h1 {
        color: var(--accent);
        line-height: 1.5;
        padding: 0 0 calc(var(--gapSize) / 4) 0;
        margin-bottom: var(--gapSize);
        border-bottom: var(--border);

        @media (min-width: 1000px) {
            font-size: 1.75rem;
        }
    }
    .details {
        display: flex;
        flex-wrap: wrap;
        gap: var(--gapSize);
        margin: calc(var(--gapSize) / 2) 0 0 0;
        padding-top: var(--gapSize);
        font-size: 0.75rem;
        & span {
            border-left: var(--border);
            padding-left: 1em;
        }
    }
    /* @media (min-width: 1000px) {
        .details {
            flex-direction: column;
        }
    } */
    .details {
        & h5 {
            color: var(--accent);
            font-size: 1em;
            margin: 0 0 0.25em 0;
        }
        & ul {
            margin: 0;
            padding: 0;
            list-style: none;
        }
        & li {
            display: inline-block;
            padding: 0;
            margin: 0 0.25rem 0 0;
        }
        & li:not(:nth-last-child(1)):after {
            content: ',';
        }
        & time {
            display: block;
        }
        & a {
            color: var(--base);
        }
    }
    .back-button-wrapper {
        background: var(--surface-1);
        display: grid;
        grid-column: 1 / span all;
        justify-content: center;
        padding: var(--gapSize);

        @media (min-width: 1000px) {
            order: 3;
            grid-column: 6 / span 2;
        }
    }
    .back-button {
        bottom: var(--gapSize);
    }
    .gallery-wrapper {
        background: var(--surface-3);
        display: grid;
        justify-content: center;
        grid-column: 1 / span all;
        padding: var(--gapSize) 0;

        @media (min-width: 1000px) {
            grid-column: 1 / span 5;
            grid-row: 1 / span all;
            order: 1;
            padding: calc(var(--gapSize) * 1.75) 0;
        }
    }
</style>
