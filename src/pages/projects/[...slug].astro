---
import Layout from '@layouts/LayoutProject.astro'
import Gallery from '@components/Gallery.astro'
import Button from '@components/Button.astro'
import { Icon } from 'astro-icon'
import { getCollection } from 'astro:content'
import { fade } from 'astro:transitions'
import type { CollectionEntry } from 'astro:content'
import { ImportAllImages } from 'src/lib/importImages'

// Generate paths for entire collection
export async function getStaticPaths() {
    const projects = await getCollection('projects')
    return projects.map((project) => ({
        params: { slug: project.slug },
        props: { project },
    }))
}

interface Props {
    project: CollectionEntry<'projects'>
}

// Get the project
const { project } = Astro.props
// Get the content
const { Content } = await project.render()
// Imports all images from given subdirectory in ./assets
const images = await ImportAllImages(project.slug, 'feature')

//Get custom accent colour
const customColour: string = project.data.customColour
//Get project categories
const categories: Array<string> = project.data.categories
// Generate the view-transition name
const transitionName = 'project-image-' + project.slug
---

<Layout
    title={project.data.title}
    customColour={customColour}
    categories={categories}
    transitionName={transitionName}
    
>
    <section class="description">
        <div class="content">
            <h1>{project.data.title}</h1>
            <Content />
            <footer class="details" role="contentinfo">
                <span>
                    <h5>Role:</h5>
                    <ul>
                        {categories.map((category) => <li>{category}</li>)}
                    </ul>
                </span>
                <span>
                    <h5>Completed:</h5>
                    <time datetime={project.data.date}>{project.data.date}</time
                    >
                </span>
                {
                    project.data.liveUrl && (
                        <span>
                            <h5>Link</h5>
                            <a href={project.data.liveUrl} target="_blank">
                                {project.data.liveUrl}{' '}
                                <Icon name="mdi:open-in-new" />
                            </a>
                        </span>
                    )
                }
            </footer>
        </div>
    </section>
    <div
        class="gallery-wrapper"
    >
        <Gallery images={images} />
    </div>
    <div class="back-button-wrapper">
        <Button
            url="/projects"
            text="Back to projects"
            hasIcon={true}
            size="borderless"
        >
            <Icon name="mdi:arrow-left" slot="icon" />
        </Button>
    </div>
</Layout>

<style>
    /* NOTE: Custom properties for colours are re-defined in layouts/LayoutProject.astro, as they are applied to the entire page(header, footer etc) */
    :global(#main) {
        grid-template-rows: 1fr auto;
    }
    .gallery-wrapper {
        display: grid;
        justify-content: center;
        grid-column: 1 / span all;
        padding: var(--gapSize) 0;

        @media (min-width: 1000px) {
            grid-column: 1 / span 4;
            grid-row: 1 / span all;
            order: 1;
        }
    }
    .description {
        background: var(--surface-3);
        grid-column: 1 / span all;
        padding: var(--gapSize);
        @media (min-width: 1000px) {
            border-left: var(--border);
            grid-column: 5 / span 2;
            order: 2;
            padding: calc(var(--gapSize) * 2) var(--gapSize);
        }

        @media (min-width: 1300px) {
            padding: calc(var(--gapSize) * 2);
        }
    }
    .content {
        max-width: 36em;
        margin: 0 auto;

        @media (min-width: 1000px) {
            position: sticky;
            top: calc(var(--gapSize) * 2);
        }

        & h1 {
            color: var(--accent);
            padding: 0 0 calc(var(--gapSize) / 2) 0;
            margin: var(--gapSize) 0 var(--borderGap) 0;
            border-bottom: var(--border);
            text-wrap: balance;

            @media (min-width: 1000px) {
                margin: 0 0 var(--gapSize) 0;
                /* font-size: 1.75rem; */
            }
        }
    }
    .details {
        display: flex;
        flex-wrap: wrap;
        gap: var(--gapSize);
        margin: calc(var(--gapSize) / 2) 0 0 0;
        padding-top: var(--gapSize);
        font-size: 0.75rem;
        & span {
            border-left: var(--border);
            padding-left: 1em;
        }
        & h5 {
            color: var(--accent);
            font-size: 1em;
            margin: 0 0 0.25em 0;
        }
        & ul {
            margin: 0;
            padding: 0;
            list-style: none;
        }
        & li {
            display: inline-block;
            padding: 0;
            margin: 0 0.25rem 0 0;
        }
        & li:not(:nth-last-child(1)):after {
            content: ',';
        }
        & time {
            display: block;
        }
        & a {
            color: var(--base);
        }
    }
    .back-button-wrapper {
        background: var(--surface-3);
        display: grid;
        grid-column: 1 / span all;
        justify-content: left;
        padding: var(--gapSize);
        border-top: var(--border);

        @media (min-width: 1000px) {
            border-left: var(--border);
            /* justify-content:center; */
            order: 3;
            grid-column: 5 / span 2;
        }
        @media (min-width: 1300px) {
            /* padding: var(--gapSize) calc(var(--gapSize) * 2); */
        }
    }
    .back-button {
        bottom: var(--gapSize);
    }
</style>
