---
import Button from '@components/Button.astro'
import { Icon } from 'astro-icon'
---

<a
    href="#"
    id="nav-toggle-open"
    title="Open Menu"
    aria-label="Open Menu"
    class="nav-toggle"
    data-astro-reload
>
    <Icon name="mdi:menu" />
</a>
<span id="nav-open">
    <!-- history.go triggering astro router reload -->
    <a
        href="#"
        id="nav-toggle-close"
        title="Close Menu"
        aria-label="Close Menu"
        class="nav-toggle"
        data-astro-reload
    >
    </a>
    <nav id="nav">
        <Button text="Projects " url="/projects" size="borderless" />
        <Button text="Articles " url="/articles" size="borderless" />
        <Button text="About " url="/about" size="borderless" />
    </nav>
</span>
<script>
    if (!document.startViewTransition) {
        setupNavEventHandlers()
    } else {
        document.addEventListener('astro:page-load', (event) => {
            setupNavEventHandlers()
            // handleNavToggle()
        })
    }
    function handleNavToggle() {
        const nav = document.querySelector('#nav')
        const notNav = document.querySelectorAll(
            '#main, #footer, #nav-toggle-open'
        )
        const navContainer = document.querySelector<HTMLElement>('#nav-open')
        const navClose =
            document.querySelector<HTMLLinkElement>('#nav-toggle-close')
        const navOpenButton =
            document.querySelector<HTMLLinkElement>('#nav-toggle-open')
        const isNavOpen = navContainer?.classList.contains('nav-expanded')
        if (!isNavOpen) {
            navContainer?.classList.add('nav-expanded')
            navClose?.focus()
            notNav?.forEach((el) => el.setAttribute('inert', ''))
            nav?.setAttribute('aria-expanded', 'true')
            console.log(isNavOpen)
        } else {
            navContainer?.classList.remove('nav-expanded')
            navOpenButton?.focus()
            notNav?.forEach((el) => el.removeAttribute('inert'))
            nav?.setAttribute('aria-expanded', 'false')
            console.log(isNavOpen)
        }
    }
    function setupNavEventHandlers() {
        const navContainer = document.querySelector<HTMLElement>('#nav-open')
        navContainer?.addEventListener('keyup', (event) => {
            if (event.code === 'Escape') document.location.hash = ''
        })
        const navOpenButton =
            document.querySelector<HTMLLinkElement>('#nav-toggle-open')
        navOpenButton?.addEventListener('click', (event) => {
            event.preventDefault
            handleNavToggle()
        })
        const navClose =
            document.querySelector<HTMLLinkElement>('#nav-toggle-close')
        navClose?.addEventListener('click', (event) => {
            event.preventDefault
            handleNavToggle()
        })
    }
</script>
<style>
    nav {
        display: flex;
        gap: var(--quarterGap);
        justify-content: flex-end;
    }
    #nav-toggle-close,
    #nav-toggle-open {
        display: none;
    }
    @media (max-width: 555px) {
        #nav-toggle-close,
        #nav-toggle-open {
            display: flex;
        }
        #nav-toggle-open {
            font-size: 2rem;
            line-height: 1;
        }
        #nav-open {
            display: grid;
            grid-template-columns: 1fr 1fr;
            position: fixed;
            width: 100%;
            min-height: 100vh;
            inset-block-start: 0;
            inset-inline-end: 0;
            transform: translateX(100vw);
            transition:
                transform 0.33s var(--outQuadratic),
                visibility 0s linear 0.33s;
            will-change: transform;
            visibility: hidden;
            /* &:target {
                transform: translateX(0);
                transition: transform 0.33s var(--outQuadratic);
                visibility: visible;
            } */
            & nav {
                flex-direction: column;
                align-items: flex-end;
                justify-content: flex-start;
                gap: var(--gapSize);
                padding: var(--doubleGap) var(--gapSize);
                background-color: var(--surface-5);
                font-size: 1.5rem;
            }
        }

        #nav-open.nav-expanded {
            transform: translateX(0);
            transition: transform 0.33s var(--outQuadratic);
            visibility: visible;
        }
        :global([inert]) {
            filter: grayscale(1);
            transition: filter 0.1s var(--defaultTiming) 0s;
        }
    }
</style>
