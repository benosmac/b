---
/*
Button component with style and icon options
It is designed to be used with @astro-icon by passing an Icon component into the named slot
For @astro-icon usage see https://github.com/natemoo-re/astro-icon#readme

Example usage with icon:

 <Button
  text="Cats"
  url="/cats"
  hasIcon={true}
  iconPosition="right"
  size="big"
  ><Icon name="mdi:cat" slot="icon" />
 </Button>
*/
interface Props {
    url: string
    text: string
    hasIcon?: boolean
    iconPosition?: 'left' | 'right'
    size?: 'little' | 'borderless' | 'big'
    buttonId?: string
}
const {
    url,
    text,
    hasIcon = false,
    iconPosition = 'left',
    size,
    buttonId,
} = Astro.props
let classes = ['button']
if (hasIcon) classes.push('icon', `icon-${iconPosition}`)
if (size) classes.push(size)
---

<a href={url} class:list={classes} id={buttonId}>
    <slot name="icon" />
    <span>{text}</span>
</a>

<style>
    :root {
        --buttonTransition: transform 0.25s var(--outQuadratic);
        @media (max-width: 555px) {
            --buttonTransition: none;
        }
    }
    .button {
        position: relative;
        display: inline-flex;
        align-items: center;
        gap: var(--halfGap);
        background-color: var(--surface-2);
        border: var(--borderAccent);
        border-radius: 0.2em;
        text-decoration: none;
        font-weight: var(--headingWeight);
        line-height: 1;
        color: var(--accent);
        padding: var(--halfGap);
        z-index: 1;
        &::after {
            content: '';
            position: absolute;
            inset: 0;
            background-color: var(--surface-4);
            border-radius: 0.2em;
            transform: scaleX(0);
            transform-origin: right;
            transition: var(--buttonTransition);
            z-index: -1;
        }
        &:hover,
        &:focus-visible {
            text-decoration: none;
            &::after {
                transform: scaleX(1);
                transform-origin: left;
            }
            & :global([astro-icon]) {
                transform: scale(1.2);
            }
        }
        & :global([astro-icon]) {
            transition: var(--buttonTransition);
        }
    }
    .button.little {
        padding: var(--quarterGap);
        border-radius: 0.1em;
        &::after {
            border-radius: 0.1em;
        }
    }
    .button.borderless {
        border: none;
        background-color: transparent;
        padding: var(--quarterGap);
        border-radius: 0.1em;
        &::after {
            border-radius: 0.1em;
        }
    }
    .button.icon-right :global([astro-icon]) {
        order: 2;
    }
</style>
