---
//  A button component with size and icon options
//  It is designed to use inline SVG icons by passing an Astro component containing your SVG code
//  into the named slot provided

//  Example usage with icon:

//  <Button url="/blog" hasIcon="true" iconPosition="right" size="little">
//     <SnazzyIcon slot="icon" />
//  </Button>

interface Props {
    url: string
    text: string
    hasIcon?: boolean
    iconPosition?: 'left' | 'right'
    size?: 'little' | 'borderless' | 'big'
}
const { url, text, hasIcon = false, iconPosition = 'left', size } = Astro.props
let classes = ['button']
if (hasIcon) classes.push('icon', `icon-${iconPosition}`)
if (size) classes.push(size)
---

<a href={url} class:list={classes}>
    <slot name="icon" />
    <span>{text}</span>
</a>

<style>
    .button {
        display: flex;
        align-items: center;
        gap: 0.5em;
        position: relative;
        background-color: var(--surface-1);
        border: 2px solid var(--surface-4);
        border-radius: 0.2em;
        text-decoration: none;
        font-weight: 700;
        line-height: 1;
        color: var(--accent);
        padding: calc(var(--gapSize) / 2);
        z-index: 1;
    }
    .button::after {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        inset: 0;
        background-color: var(--surface-4);
        border-radius: 0.2em;
        transform: scaleX(0);
        transform-origin: right;
        transition: transform 0.25s var(--outQuadratic);
        z-index: -1;
    }
    :is(.button:hover, .button:focus-visible) {
        text-decoration: none;
    }
    :is(.button:hover, .button:focus-visible)::after {
        transform: scaleX(1);
        transform-origin: left;
    }
    :is(.button:hover, .button:focus-visible) :global([astro-icon]) {
        transform: scale(1.2);
    }
    .button.little {
        padding: calc(var(--gapSize) / 4);
    }
    .button.borderless {
        border: none;
        background-color: transparent;
        padding: calc(var(--gapSize) / 4);
    }
    .button.icon-right :global([astro-icon]) {
        order: 2;
    }
    .button :global([astro-icon]) {
        transition: transform 0.25s var(--outQuadratic);
    }
</style>
