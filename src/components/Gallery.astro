---
import type { ImageMetadata } from 'astro'
import { Image } from 'astro:assets'
export interface Props {
    images: Array<ImageMetadata>
}

const { images } = Astro.props

const defaultImageWidth = 1111
---

<!-- 
  A simple gallery component that outputs a grid of images from an array of source urls
  Uses @Astro's 'astro:assets' <Image> component
  Images with filenames ending in -wide.jpg will span both columns
-->
<div class="gallery">
    {
        images.map((image) => (
            <Image
                src={image}
                format={image.format}
                alt=""
                format="webp"
                width={defaultImageWidth}
                class={image.src.includes('-wide') ? 'wide' : ''}
            />
        ))
    }
</div>
<script>
    const galleryImages = document.querySelectorAll('.gallery > img')

    function focusImage(image: any) {
        image.classList.add('full-width')
        setTimeout(
            () =>
                image.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start',
                    inline: 'nearest',
                }),
            300
        )
    }

    galleryImages.forEach((image) => {
        image.addEventListener('click', () => {
            focusImage(image)
        })
    })
</script>
<style define:vars={{ defaultImageWidth }}>
    .gallery {
        display: flex;
        flex-flow: row wrap;
        align-items: flex-start;
        gap: var(--halfGap);
        padding: var(--halfGap);
        max-width: calc(var(--defaultImageWidth) * 1px);
    }
    img {
        background-color: var(--surface-1);
        cursor: pointer;
        max-width: 100%;
        flex-basis: 100%;
        height: auto;
    }
    @media (min-width: 666px) {
        .gallery {
            padding: var(--gapSize);
        }
        img {
            max-width: calc(50% - var(--quarterGap));
            flex: 1 1 50%;
        }
        .wide {
            max-width: 100%;
        }
        .full-width {
            max-width: 100%;
            transition: all 0.2s ease;
        }
    }
</style>
